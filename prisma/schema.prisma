// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// schema.prisma

model BankProfile {
  id         String @id @default("trust-bank-1234")
  bankName   String
  branchName String
  location   String

  bankBalances BankBalance[]
}

model BankBalance {
  id       String @id @default(uuid())
  currency String
  balance  Float

  bankProfileId String
  bankProfile   BankProfile @relation(fields: [bankProfileId], references: [id])
}

model User {
  id                String             @id @default(uuid())
  name              String
  email             String             @unique
  password          String
  role              UserRole           @default(client)
  createdAt         DateTime           @default(now())
  // accounts  Account[]
  accounts          Accounts[]
  agricultureLoan   AgricultureLoan[]
  card              Card[]
  currencyExchanges CurrencyExchange[]

  @@map("users")
}

enum UserRole {
  super_admin
  admin
  client
  manager
}

model Accounts {
  id           String        @unique @default(uuid())
  accountId    String        @unique
  contactNo    String
  profession   String
  age          Int
  education    String
  profileImage String
  accountType  String
  citizenShip  String
  userId       String
  user         User          @relation(fields: [userId], references: [id])
  createdAt    DateTime      @default(now())
  userBalances UserBalance[]

  @@map("accounts")
}

model UserBalance {
  id           String   @id @unique @default(uuid())
  currency     String
  balance      Float
  accountId    String
  userAccounts Accounts @relation(fields: [accountId], references: [id])
}

// {
//   id: 1,
//   title: "Debit Card",
//   description: "Debit Card",
//   category: "Credit Card",
//   image: "/assets/images/debit-card.png",
//   cardImg: "/assets/images/debit-card.png",
//   benefits: ["Get 10% cashback", "Welcome offer", "Get premium discount"],
//   condition:[{
//     age: 10,
//     limit: 5000,
//     offer: 10,        

//   }]
// },

model DebitCreditCard {
  id          String   @unique @default(uuid())
  title       String
  description String
  category    String
  image       String
  cardImg     String
  benefits    String[]

  debitCreditCardConditions DebitCreditCardCondition[]
}

model DebitCreditCardCondition {
  id                String          @unique @default(uuid())
  age               Int
  limit             Int
  offer             Int
  DebitCreditCardId String
  DebitCreditCard   DebitCreditCard @relation(fields: [DebitCreditCardId], references: [id])
}

// loan 
// Agriculture loan
model AgricultureLoan {
  id               String     @unique @default(uuid())
  loanName         String
  amount           Float
  cropType         String
  landSize         String
  guarantorName    String
  guarantorPhone   String
  guarantorAddress String
  userId           String
  user             User       @relation(fields: [userId], references: [id])
  status           loanStatus @default(pending)
}

enum loanStatus {
  pending
  accepted
  rejected
}

// Personal loan
model PersonalLoan {
  id               String @unique @default(uuid())
  loanName         String
  amount           String
  employment       String
  income           String
  guarantorName    String
  guarantorPhone   String
  guarantorAddress String
}

// Corporate Loan : 
model CorporateLoan {
  id String @unique @default(uuid())

  loanName         String
  amount           String
  businessType     String
  turnover         String
  guarantorName    String
  guarantorPhone   String
  guarantorAddress String
}

// Education loan
model EducationLoan {
  id               String @unique @default(uuid())
  loanName         String
  amount           String
  course           String
  institution      String
  guarantorName    String
  guarantorPhone   String
  guarantorAddress String
}

model Card {
  id               String     @unique @default(uuid())
  country          String
  loanAmount       String
  employmentStatus String
  cardType         cardType
  birthDate        String
  ssn              String
  address          String
  annualIncome     String
  nidNumber        String
  maritalStatus    String
  creditScore      String
  userId           String
  status           CardStatus @default(pending)
  user             User       @relation(fields: [userId], references: [id])
}

enum cardType {
  credit
  debit
}

enum CardStatus {
  accepted
  pending
  rejected
}

model SendMoney {
  id              String          @unique @default(uuid())
  swiftCode       String
  sellerAccountId String
  userAccountId   String
  sentStatus      sendMoneyStatus @default(pending)
}

enum sendMoneyStatus {
  pending
  sent
}

model CurrencyExchange {
  id           String @id @default(uuid())
  userId       String
  fromCurrency String
  toCurrency   String
  fromAmount   Float
  toAmount     Float
  user         User   @relation(fields: [userId], references: [id])
}
